<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5">
	<display-name>Struts2Example15</display-name>

	<context-param>
		<param-name>org.apache.tiles.impl.BasicTilesContainer.DEFINITIONS_CONFIG</param-name>
		<param-value>/WEB-INF/tiles.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.apache.struts2.tiles.StrutsTilesListener</listener-class>
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml</param-value>
	</context-param>
	<listener>
		<!-- to make the spring scope work -->
		<listener-class>
			org.springframework.web.context.request.RequestContextListener
		</listener-class>
	</listener>

	<!-- Loads the root application context of this web app at startup, by default 
		from "/WEB-INF/applicationContext.xml". Note that you need to fall back to 
		Spring's ContextLoaderServlet for J2EE servers that do not follow the Servlet 
		2.4 initialization order. Use WebApplicationContextUtils.getWebApplicationContext(servletContext) 
		to access it anywhere in the web application, outside of the framework. The 
		root context is the parent of all servlet-specific contexts. This means that 
		its beans are automatically available in these child contexts, both for getBean(name) 
		calls and (external) bean references. -->
	<!-- <listener> <listener-class> org.springframework.web.context.ContextLoaderListener 
		</listener-class> </listener> -->
	<listener>
		<listener-class>com.theone.framework.application.HContextLoaderListener</listener-class>
	</listener>

	<!-- Spring Security for concurrent access -->
	<listener>
		<listener-class>org.springframework.security.ui.session.HttpSessionEventPublisher</listener-class>
	</listener>
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>
			org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
		</filter-class>
	</filter>
	<filter>
		<filter-name>sessionFilter</filter-name>
		<filter-class>
			org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
		</filter-class>
		<!-- <init-param> <param-name>singleSession</param-name> <param-value>false</param-value> 
			</init-param> -->
	</filter>
	<filter-mapping>
		<filter-name>sessionFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	
	
</web-app>