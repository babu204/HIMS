<?xml version="1.0" encoding="UTF-8"?>
<!--
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">
-->	
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">	
	<!--
		Configure the dataSource. Notice that we are using properties defined
		in applicationContextProperties.xml, i.e.,
		${db.connection.driver_class} uses a property called
		db.connection.driver_class defined in db.properties file, which was
		imported by applicationContextProperties.xml.
	-->

	<!-- DataSource Definition -->
	<bean id="dataSource" class="com.theone.framework.spring.dao.DynamicDataSource">
		<property name="jndiName">
			<value>${db.jndiName}</value>
		</property>
		<property name="driverClassName">
			<value>${db.connection.driver_class}</value>
		</property>
		<property name="url">
			<value>${db.connection.url}</value>
		</property>
		<property name="username">
			<value>${db.connection.username}</value>
		</property>
		<property name="password">
			<value>${db.connection.password}</value>
		</property>
	</bean>
    <!--<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${db.connection.driver_class}" />
        <property name="jdbcUrl" value="${db.connection.url}" />
        <property name="user" value="${db.connection.username}" />
        <property name="password" value="${db.connection.password}" />
        <property name="minPoolSize" value="5"/>
        <property name="maxPoolSize" value="20"/>
        <property name="maxIdleTime" value="3600"/> &lt;!&ndash; in seconds &ndash;&gt;
        <property name="acquireIncrement" value="2"/>
        <property name="idleConnectionTestPeriod" value="600"/> &lt;!&ndash; in seconds &ndash;&gt;
        <property name="maxStatements" value="5"/>
        <property name="preferredTestQuery" value="select count(*) from enlliance_ecoin_master" />
        <property name="checkoutTimeout" value="120"/>
	</bean>-->
	<!--
        Setup Hibernate based on config file
    -->
	<bean id="sessionFactory"
		class="com.theone.framework.user.HAnnotationSessionFactoryBean">
		<!-- Comment it when using hsql-->
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
		<property name="configurationClass">
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>

		<!--
			<property name="hibernateProperties"> <ref bean="hibernateProperties"
			/> </property>
		-->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>

				<!-- hsql setting for tutorial use only -->
                <!--auto create table if does not exist-->
                <prop key="hibernate.hbm2ddl.auto">update</prop>

				<!--
					<prop
					key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
					<prop key="hibernate.connection.url">jdbc:hsqldb:file:/test</prop>
					<prop
					key="hibernate.connection.driver_class">org.hsqldb.jdbcDriver</prop>
				-->

			</props>
		</property>

		<property name="configLocation">
			<value>classpath:resources/hibernate.cfg.xml</value>
		</property>
		<!--
			<property name="packagesToScan"> <list>
			<value>com.mras.audit4mras.bo</value> <value>com.mras.mras.bo</value>
			<value>com.mras.mrasweb.bo</value> </list> </property> <property
			name="mappingDirectoryLocations"> <list>
			<value>classpath:com/mras/audit4mras/bo</value>
			<value>classpath:com/mras/mras/bo</value>
			<value>classpath:com/mras/mrasweb/bo</value> </list> </property>
		-->
	</bean>

	<!--
		If we opt to use JTA transactions, we could replace this with the
		JTATransactionManager or configure Hibernante to work with
		JTATransactions and keep this as is.
	-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!--
		You can setup a HibernateTemplate that configures Hibernate sessions
		in special ways. For example, you could set a different FlushMode than
		the default. NOTE THIS COMMENTED OUT AS THE DEFAULTS ARE ACCEPTABLE.
		<bean id="hibernateTemplate"
		class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory"> <ref bean="sessionFactory"/>
		</property> <property name="cacheQueries"> <value>true</value>
		</property> </bean>
	-->	
	
	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:advisor order="2" pointcut="execution(* com..manager..*(..))" advice-ref="txAdvice"/>
		<aop:advisor order="3" pointcut="execution(* com..service..*(..))" advice-ref="txAdvice"/>
	</aop:config>
	
	<tx:annotation-driven/>

	<!-- This is the base definition for all Hibernate based DAOs -->
	<bean id="hibernateDaoSupport"
		class="org.springframework.orm.hibernate3.support.HibernateDaoSupport"
		abstract="true">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<!--
			You could use the configured Hibernate template or create a new
			mapping that uses a configured hibernate template.
			HibernateDaoSupport creates a HibernateTempalte with the default
			settings. NOTE THIS IS COMMENTED OUT. <property
			name="hibernateTemplate"> <ref bean="hibernateTemplate"/> </property>
		-->
	</bean>

	<bean id="jdbcDao" class="com.theone.framework.spring.dao.JdbcDao">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="genericDao" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="com.theone.framework.spring.dao.HibernateDao">
				<property name="sessionFactory">
					<ref bean="sessionFactory" />
				</property>
			</bean>
		</property>
		<property name="interceptorNames">
			<list>
				<value>appDetailsBaseAdvice</value>
			</list>
		</property>
	</bean>
</beans>