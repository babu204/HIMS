<?xml version="1.0" encoding="UTF-8"?>
<!--
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">
-->	
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">	
	<!--
		Configure the dataSource. Notice that we are using properties defined
		in applicationContextProperties.xml, i.e.,
		${db.connection.driver_class} uses a property called
		db.connection.driver_class defined in db.properties file, which was
		imported by applicationContextProperties.xml.
	-->

	<!-- DataSource Definition -->
	<bean id="dataSource" class="com.theone.framework.spring.dao.DynamicDataSource">
		<property name="jndiName">
			<value>${db.jndiName}</value>
		</property>
		<property name="driverClassName">
			<value>${db.connection.driver_class}</value>
		</property>
		<property name="url">
			<value>${db.connection.url}</value>
		</property>
		<property name="username">
			<value>${db.connection.username}</value>
		</property>
		<property name="password">
			<value>${db.connection.password}</value>
		</property>
	</bean>

	<!--
        Setup Hibernate based on config file
    -->
	<bean id="sessionFactory"
		class="com.theone.framework.user.HAnnotationSessionFactoryBean">
		<!-- Comment it when using hsql-->
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
		<property name="configurationClass">
			<value>org.hibernate.cfg.AnnotationConfiguration</value>
		</property>

		<!--
			<property name="hibernateProperties"> <ref bean="hibernateProperties"
			/> </property>
		-->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>

				<!-- hsql setting for tutorial use only -->
				<!--
					<prop key="hibernate.hbm2ddl.auto">update</prop>auto create table
					if does not exist
				-->
				<!--
					<prop
					key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
					<prop key="hibernate.connection.url">jdbc:hsqldb:file:/test</prop>
					<prop
					key="hibernate.connection.driver_class">org.hsqldb.jdbcDriver</prop>
				-->

			</props>
		</property>

		<property name="configLocation">
			<value>classpath:resources/hibernate.cfg.xml</value>
		</property>
		<!--
			<property name="packagesToScan"> <list>
			<value>com.mras.audit4mras.bo</value> <value>com.mras.mras.bo</value>
			<value>com.mras.mrasweb.bo</value> </list> </property> <property
			name="mappingDirectoryLocations"> <list>
			<value>classpath:com/mras/audit4mras/bo</value>
			<value>classpath:com/mras/mras/bo</value>
			<value>classpath:com/mras/mrasweb/bo</value> </list> </property>
		-->
	</bean>

	<!--
		If we opt to use JTA transactions, we could replace this with the
		JTATransactionManager or configure Hibernante to work with
		JTATransactions and keep this as is.
	-->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

 
	<!-- TransactionInterceptor -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<!--
				Default rule is to roll back on a runtime exception and commit on
				any checked exception, + for commit and - for not commit
			-->
			<props>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="edit*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="do*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="change*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<!-- BeanNameAutoProxyCreator -->
	<bean id="autoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
		<!-- Add all the services to here for transaction and rollback -->
		<property name="beanNames">
			<list>
				<!-- managers used by theone Framework -->
				<idref bean="i18n" />
		 
				<idref bean="sessionLogManager" />
				<idref bean="userDetailsService" />

				<!-- put in service interfaces here for transaction management -->
				<!--<idref bean="userManager" />-->
			</list>
		</property>
	</bean>

	<!-- This is the base definition for all Hibernate based DAOs -->
	<bean id="hibernateDaoSupport"
		class="org.springframework.orm.hibernate3.support.HibernateDaoSupport"
		abstract="true">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
		<!--
			You could use the configured Hibernate template or create a new
			mapping that uses a configured hibernate template.
			HibernateDaoSupport creates a HibernateTempalte with the default
			settings. NOTE THIS IS COMMENTED OUT. <property
			name="hibernateTemplate"> <ref bean="hibernateTemplate"/> </property>
		-->
	</bean>

	<bean id="jdbcDao" class="com.theone.framework.spring.dao.JdbcDao">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<bean id="genericDao" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="com.theone.framework.spring.dao.HibernateDao">
				<property name="sessionFactory">
					<ref bean="sessionFactory" />
				</property>
			</bean>
		</property>
		<property name="interceptorNames">
			<list>
				<value>appDetailsBaseAdvice</value>
			</list>
		</property>
	</bean>
</beans>